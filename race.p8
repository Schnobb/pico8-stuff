pico-8 cartridge // http://www.pico-8.com
version 32
__lua__
function _init()
 gs={
  carpos=0,
  dist=0,
  carspeed=0.0,
  caraccel=0.05,
  cardir=0,
  carturnrate=0.1,
  cursection=0,
  
  currentcurve=0,
  trackcurve=0,
  playercurve=0,
  
  totaltrackdist=0,
  
  curlaptime=0,
  
  track={},
  laptimes={},
 
  debug={
   dbg={},
   enabled=true,
  },
 }
 
 reset_game()
end

function _update60()
 gs.debug.dbg={}
 
 handle_inputs()
 update_game()
end

function _draw()
 cls(0)
 
 draw_game()
 
 draw_debug()
end

function reset_game()
 gs.carpos=0
 gs.distance=0
 gs.carspeed=0
 gs.caraccel=2
  
 gs.currentcurve=0
 gs.trackcurve=0
 gs.playercurve=0
  
 gs.totaltrackdist=0
  
 gs.curlaptime=0
 
 gs.laptimes={}
 
 for i=1,5 do
  gs.laptimes[i]=0
 end
 
 init_track()
end
-->8
-- inits

function init_track()
 gs.track={}
 
 add(gs.track,new_section(0,10))
 
 add(gs.track,new_section(0,200))
 add(gs.track,new_section(1,200))
 add(gs.track,new_section(0,400))
 add(gs.track,new_section(1,100))
 add(gs.track,new_section(-1,100))
 add(gs.track,new_section(1,100))
 add(gs.track,new_section(0.4,400))
 add(gs.track,new_section(-0.2,500))
 add(gs.track,new_section(1,200))
 add(gs.track,new_section(0,150))
 add(gs.track,new_section(-1,50))
 add(gs.track,new_section(0,600))
 
 for s in all(gs.track) do
  gs.totaltrackdist+=s.dist
 end
end
-->8
-- objects

function new_section(curve,dist)
 return {
  curve=curve,
  dist=dist
 }
end
-->8
-- updates

function handle_inputs()
 if btn(⬆️) then
  gs.carspeed+=gs.caraccel
 else
  gs.carspeed-=gs.caraccel/2
 end
 
 if btn(⬅️) then
  gs.playercurve-=gs.carturnrate
 end
 
 if btn(➡️) then
  gs.playercurve+=gs.carturnrate
 end
end

function update_game()
 --debug("test1")
 --debug("test2")
 --debug("test3")
 --debug("test very long")
 --debug("tes")
 
 if abs(gs.playercurve-gs.trackcurve)>=0.8 then
  --gs.carspeed-=gs.caraccel*5
 end
 
 gs.carspeed=mid(0,gs.carspeed,1)
 debug(gs.carspeed.."")
 debug(gs.dist.."")
 gs.dist+=10*gs.carspeed
 
 local trackoff=0
 gs.cursection=1
 
 gs.curlaptime+=1
 if gs.dist>=gs.totaltrackdist then
  gs.dist-=gs.totaltrackdist
  add(gs.laptimes,gs.curlaptime,1)
  deli(gs.laptimes)
  gs.curlaptime=0
 end
 
 while gs.cursection<#gs.track[gs.cursection] and trackoff<=gs.distance do
  trackoff+=gs.track[gs.cursection].dist
  gs.cursection+=1
 end
 
 local targetcurve=gs.track[gs.cursection].curve
 local curvediff=(targetcurve-gs.currentcurve)*gs.carspeed
 gs.currentcurve+=curvediff
 
 gs.trackcurve+=gs.currentcurve*gs.carspeed
 
 gs.carpos=gs.playercurve-gs.trackcurve
end
-->8
-- draw

function draw_game()
 debug(stat(7).."/"..stat(8))
   
 for y=0,63 do
  for x=0,127 do
   local col=y<15 and 14 or 12
   
   if y>=15 and y<32 then
    col=y%2==0 and 14 or 12
   end
   
   pset(x,y,col)
  end
 end
 
 for x=0,127 do
  local hillh=abs(sin(x*0.001+gs.trackcurve*0.01)*32)
  for y=64-hillh,64 do
   local col=y<25 and 2 or 4
   if y<64 then
    pset(x,y,col)
   end
  end
 end
 
 for y=0,63 do
  for x=0,127 do
   local persp=y/64
   
   --debug(""..gs.currentcurve)
   
   local midp=0.5+gs.currentcurve*((1-persp)^3)
   local roadw=0.1+persp*0.8
   local clipw=0.15*roadw
   
   roadw*=0.5
   
   local lgrass=(midp-roadw-clipw)*128
   local lclip=(midp-roadw)*128
   local rgrass=(midp+roadw+clipw)*128
   local rclip=(midp+roadw)*128
   
   local col=0
   
   local grasscol=sin(10*((1-persp)^3)+gs.dist*0.02)>0 and 11 or 3
   local clipcol=sin(20*((1-persp)^2)+gs.dist)>0 and 8 or 7
   local roadcol=gs.cursection+1==0 and 7 or 5
   
   if x>=0 and x<lgrass or x>=rgrass then
    col=grasscol
   elseif x>=lgrass and x<lclip or x>=rclip and x<rgrass then
    col=clipcol
   elseif x>=lclip and x<rclip then
    col=roadcol
   end
   
   pset(x,63+y,col)
  end
 end
end

function draw_debug()
 if not gs.debug.enabled or #gs.debug.dbg<=0 then
  return
 end

 local w=0
 local h=#gs.debug.dbg*6
 
 for _,t in pairs(gs.debug.dbg) do
  if #t>w then
   w=#t
  end
 end
 
 w*=4

 rectfill(0,0,w+2,h+2,7)
 rectfill(1,1,w+1,h+1,0)
 
 cursor(2,2)
  
 for d in all(gs.debug.dbg) do
  print(d,7)
 end
 
 cursor()
end
-->8
-- utils

function debug(txt)
 add(gs.debug.dbg,txt)
end
__gfx__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000077777777777777777777777700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000077777777777777777777777700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000066666666666666666666666600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000055555555555555555555555500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000077777777777777777777777700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000002222222222222222200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000022222222222220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000008888888888800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000008888800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000008888800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000008888800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000005656565000000c88888c0000056565650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000565656500000c8888888c000056565650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000565656588888222222222888856565650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000565656566666666666666666656565650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000565656511111111111111111156565650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000565656566666666666666666656565650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000565656522222222222222222256565650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000565656582222222222222222856565650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000565656588888888888888888856565650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000565656588888888888888888856565650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000565656500000000000000000056565650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000565656500000000000000000056565650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
